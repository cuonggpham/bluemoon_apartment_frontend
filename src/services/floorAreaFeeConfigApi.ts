import { FeeTypeEnum } from '../types/monthlyFee';
import api from './axios';

const API_BASE_URL = 'http://localhost:8080/api/v1';

export interface FloorAreaFeeConfig {
  id?: number;
  feeName: string;
  description: string;
  feeTypeEnum: FeeTypeEnum;
  unitPricePerSqm: number;
  isActive: boolean;
  isAutoGenerated: boolean;
  effectiveFrom?: string; // ISO date string
  effectiveTo?: string; // ISO date string
  scheduledDay?: number; // 1-31
  scheduledHour?: number; // 0-23
  scheduledMinute?: number; // 0-59
  createdAt?: string;
  updatedAt?: string;
}

export const floorAreaFeeConfigApi = {
  /**
   * Get all active floor area fee configs
   */
  async getAllActiveConfigs(): Promise<FloorAreaFeeConfig[]> {
    const response = await api.get('/floor-area-fee-configs');
    // Extract data from the wrapped response
    return response.data.data || response.data;
  },

  /**
   * Get configs ready for auto generation
   */
  async getAutoGenerationConfigs(): Promise<FloorAreaFeeConfig[]> {
    const response = await api.get('/floor-area-fee-configs/auto-generation');
    return response.data.data || response.data;
  },

  /**
   * Get currently effective configs
   */
  async getCurrentlyEffectiveConfigs(): Promise<FloorAreaFeeConfig[]> {
    const response = await api.get('/floor-area-fee-configs/effective');
    return response.data.data || response.data;
  },

  /**
   * Get configs by fee type
   */
  async getConfigsByFeeType(feeType: FeeTypeEnum): Promise<FloorAreaFeeConfig[]> {
    const response = await api.get(`/floor-area-fee-configs/by-type/${feeType}`);
    return response.data.data || response.data;
  },

  /**
   * Get config by ID
   */
  async getConfigById(id: number): Promise<FloorAreaFeeConfig> {
    const response = await api.get(`/floor-area-fee-configs/${id}`);
    return response.data.data || response.data;
  },

  /**
   * Create new floor area fee config
   */
  async createConfig(config: Omit<FloorAreaFeeConfig, 'id'>): Promise<FloorAreaFeeConfig> {
    const response = await api.post('/floor-area-fee-configs', config);
    return response.data.data || response.data;
  },

  /**
   * Update existing floor area fee config
   */
  async updateConfig(id: number, config: Partial<FloorAreaFeeConfig>): Promise<FloorAreaFeeConfig> {
    const response = await api.put(`/floor-area-fee-configs/${id}`, config);
    return response.data.data || response.data;
  },

  /**
   * Deactivate config (soft delete)
   */
  async deactivateConfig(id: number): Promise<void> {
    await api.put(`/floor-area-fee-configs/${id}/deactivate`);
  },

  /**
   * Delete config permanently
   */
  async deleteConfig(id: number): Promise<void> {
    await api.delete(`/floor-area-fee-configs/${id}`);
  },

  /**
   * Initialize default configs (for testing/setup)
   */
  async initializeDefaultConfigs(): Promise<string> {
    const response = await api.post('/floor-area-fee-configs/initialize-defaults');
    return response.data;
  },

  // ============ UTILITY METHODS ============

  /**
   * Generate cron expression from schedule
   */
  getCronExpression(config: FloorAreaFeeConfig): string | null {
    if (!config.scheduledDay || config.scheduledHour === undefined || config.scheduledMinute === undefined) {
      return null;
    }
    // Format: "0 {minute} {hour} {day} * ?" - runs monthly
    return `0 ${config.scheduledMinute} ${config.scheduledHour} ${config.scheduledDay} * ?`;
  },

  /**
   * Check if config is ready for auto generation
   */
  isReadyForAutoGeneration(config: FloorAreaFeeConfig): boolean {
    return config.isActive && 
           config.isAutoGenerated && 
           config.scheduledDay !== undefined && 
           config.scheduledHour !== undefined && 
           config.scheduledMinute !== undefined &&
           config.unitPricePerSqm > 0;
  },

  /**
   * Check if config is currently effective
   */
  isCurrentlyEffective(config: FloorAreaFeeConfig): boolean {
    const now = new Date();
    const today = now.toISOString().split('T')[0];
    
    const afterStart = !config.effectiveFrom || today >= config.effectiveFrom;
    const beforeEnd = !config.effectiveTo || today <= config.effectiveTo;
    
    return config.isActive && afterStart && beforeEnd;
  },

  /**
   * Format schedule display
   */
  formatScheduleDisplay(config: FloorAreaFeeConfig): string {
    if (!this.isReadyForAutoGeneration(config)) {
      return 'Không tự động';
    }
    
    const day = config.scheduledDay;
    const hour = config.scheduledHour!.toString().padStart(2, '0');
    const minute = config.scheduledMinute!.toString().padStart(2, '0');
    
    return `Ngày ${day} hàng tháng lúc ${hour}:${minute}`;
  },

  /**
   * Get fee type display name
   */
  getFeeTypeDisplayName(feeType: FeeTypeEnum): string {
    const typeNames: Record<FeeTypeEnum, string> = {
      'MANDATORY': 'Phí bắt buộc',
      'VOLUNTARY': 'Phí tự nguyện',
      'VEHICLE_PARKING': 'Phí gửi xe',
      'FLOOR_AREA': 'Phí theo diện tích sàn'
    };
    
    return typeNames[feeType] || feeType;
  },

  /**
   * Validate config data
   */
  validateConfig(config: Partial<FloorAreaFeeConfig>): string[] {
    const errors: string[] = [];
    
    if (!config.feeName?.trim()) {
      errors.push('Tên phí không được để trống');
    }
    
    if (!config.description?.trim()) {
      errors.push('Mô tả không được để trống');
    }
    
    if (!config.feeTypeEnum) {
      errors.push('Loại phí không được để trống');
    }
    
    if (!config.unitPricePerSqm || config.unitPricePerSqm <= 0) {
      errors.push('Giá theo m² phải lớn hơn 0');
    }
    
    if (config.isAutoGenerated) {
      if (!config.scheduledDay || config.scheduledDay < 1 || config.scheduledDay > 31) {
        errors.push('Ngày tự động phải từ 1-31');
      }
      
      if (config.scheduledHour === undefined || config.scheduledHour < 0 || config.scheduledHour > 23) {
        errors.push('Giờ tự động phải từ 0-23');
      }
      
      if (config.scheduledMinute === undefined || config.scheduledMinute < 0 || config.scheduledMinute > 59) {
        errors.push('Phút tự động phải từ 0-59');
      }
    }
    
    return errors;
  }
};

export default floorAreaFeeConfigApi; 